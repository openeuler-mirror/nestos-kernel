/* SPDX-License-Identifier: GPL-2.0 */
/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * Description: ubcore opcode header file
 * Author: Qian Guoxin, Ouyang Changchun
 * Create: 2023-2-28
 * Note:
 * History: 2023-2-28: Create file
 */

#ifndef UBCORE_OPCODE_H
#define UBCORE_OPCODE_H

/* Indicates the verification policy of the key. */
#define UBCORE_TOKEN_NONE             0
#define UBCORE_TOKEN_PLAIN_TEXT       1
#define UBCORE_TOKEN_SIGNED           2
#define UBCORE_TOKEN_ALL_ENCRYPTED    3
#define UBCORE_TOKEN_RESERVED         4

#define UBCORE_TOKEN_ID_INVALID       0
#define UBCORE_TOKEN_ID_VALID         1

/* Indicates whether the segment can be cached by multiple hosts. */
#define UBCORE_NON_CACHEABLE        0
#define UBCORE_CACHEABLE            1

/* Indicates that the current process has mapped this segment */
#define UBCORE_SEG_NOMAP            0
#define UBCORE_SEG_MAPPED           1

/* Notify the source after the task is completed. */
#define UBCORE_COMPLETE_ENABLE      1
/* Do not notify the source after the task is complete. */
#define UBCORE_COMPLETE_DISABLE     0

/* There is no interruption when notifying through JFC. */
#define UBCORE_SOLICITED_DISABLE    0
/* Interrupt occurred while notifying via JFC. */
#define UBCORE_SOLICITED_ENABLE     1

/* There is no fence. */
#define UBCORE_FENCE_DISABLE        0
/* Fence with previous WRs. */
#define UBCORE_FENCE_ENABLE         1

/* The data is generated by source_address assignment. */
#define UBCORE_INLINE_DISABLE       0
/* The data is carried in the command. */
#define UBCORE_INLINE_ENABLE        1

#define UBCORE_NO_SHARE_JFR         0
#define UBCORE_SHARE_JFR            1

/* opcode definition */
/* Must be consistent with urma_opcode_t */
enum ubcore_opcode {
	UBCORE_OPC_WRITE              = 0x00,
	UBCORE_OPC_WRITE_IMM          = 0x01,
	UBCORE_OPC_WRITE_NOTIFY       = 0x02,
	UBCORE_OPC_READ               = 0x10,
	UBCORE_OPC_CAS                = 0x20,
	UBCORE_OPC_SWAP               = 0x21,
	UBCORE_OPC_FADD               = 0x22,
	UBCORE_OPC_FSUB               = 0x23,
	UBCORE_OPC_FAND               = 0x24,
	UBCORE_OPC_FOR                = 0x25,
	UBCORE_OPC_FXOR               = 0x26,
	UBCORE_OPC_SEND               = 0x40, // remote JFR/jetty ID
	UBCORE_OPC_SEND_IMM           = 0x41, // remote JFR/jetty ID
	UBCORE_OPC_SEND_INVALIDATE    = 0x42, // remote JFR/jetty ID and seg token id
	UBCORE_OPC_NOP                = 0x51,
	UBCORE_OPC_LAST
};

/* completion information */
/* Must be consistent with urma_cr_status_t */
enum ubcore_cr_status { // completion record status
	UBCORE_CR_SUCCESS = 0,
	UBCORE_CR_UNSUPPORTED_OPCODE_ERR,
	UBCORE_CR_LOC_LEN_ERR,        // Local data too long error
	UBCORE_CR_LOC_OPERATION_ERR,  // Local operation err
	UBCORE_CR_LOC_ACCESS_ERR,     // Access to local memory error when WRITE_WITH_IMM
	UBCORE_CR_REM_RESP_LEN_ERR,
	UBCORE_CR_REM_UNSUPPORTED_REQ_ERR,
	UBCORE_CR_REM_OPERATION_ERR,
	/* Memory access protection error occurred in the remote node */
	UBCORE_CR_REM_ACCESS_ABORT_ERR,
	UBCORE_CR_ACK_TIMEOUT_ERR,
	/* RNR retries exceeded the maximum number: remote jfr has no buffer */
	UBCORE_CR_RNR_RETRY_CNT_EXC_ERR,
	UBCORE_CR_FLUSH_ERR,
	UBCORE_CR_WR_SUSPEND_DONE,
	UBCORE_CR_WR_FLUSH_ERR_DONE,
	UBCORE_CR_WR_UNHANDLED
};

/* Must be consistent with urma_cr_opcode_t */
enum ubcore_cr_opcode {
	UBCORE_CR_OPC_SEND = 0x00,
	UBCORE_CR_OPC_SEND_WITH_IMM,
	UBCORE_CR_OPC_SEND_WITH_INV,
	UBCORE_CR_OPC_WRITE_WITH_IMM
};

enum ubcore_slice {
	UBCORE_SLICE_32K   = 1 << 15,
	UBCORE_SLICE_64K   = 1 << 16,
	UBCORE_SLICE_128K  = 1 << 17,
	UBCORE_SLICE_256K  = 1 << 18
};

#endif
